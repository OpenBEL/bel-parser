#include <stdio.h>
#include <string.h>
#include "../src/libbel.h"
#include "../src/bel-parser.h"

// Test constraint
#define LINE_CHAR_LEN 1024 * 32 // 32 kilobytes

#test term_ast
    char empty[LINE_CHAR_LEN]               = "";
    char single_parameter[LINE_CHAR_LEN]    = "r(AFFX:100009_r_at)";
    char parameter_string[LINE_CHAR_LEN]    = "bp(GOBP:\"apoptotic process\")";
    char no_namespace[LINE_CHAR_LEN]        = "p(AKT1)";
    char single_char_one[LINE_CHAR_LEN]     = "r(MGI:a)";
    char single_char_two[LINE_CHAR_LEN]     = "r(a)";
    char single_char_thr[LINE_CHAR_LEN]     = "pmod(P)";
    char long_parameter[LINE_CHAR_LEN]      = "a(SCHEM:\"3,5,9-Trioxo-4-phosphaheptacosan-1-aminium, 7-(acetyloxy)-4-hydroxy-N,N,N-trimethyl-, hydroxide, inner salt, 4-oxide, (R)-\")";
    char mult_parameter_one[LINE_CHAR_LEN]  = "p(AKT1, HGNC:AKT2, AKT3)";
    char mult_parameter_two[LINE_CHAR_LEN]  = "bp(GOBP:\"apoptotic process\", AFFX:\"AFFX-18SRNAMur/X00686_5_at\")";
    char nested_one[LINE_CHAR_LEN]          = "cat(p(HGNC:AKT1))";
    char nested_two[LINE_CHAR_LEN]          = "p(HGNC:AKT1, pmod(P,S,317))";
    char nested_thr[LINE_CHAR_LEN]          = "complex(p(HGNC:AKT1), p(HGNC:AKT2))";
    char nested_for[LINE_CHAR_LEN]          = "tloc(p(MGI:Slc2a4), GOCCID:0005737, GOCCID:0005886)";
    char nested_fiv[LINE_CHAR_LEN]          = "p(MGI:Akt1, fusion(MGI:Akt2))";
    char long_term[LINE_CHAR_LEN]           = "rxn(reactants(a(CHEBI:testosterone),p(EGID:1666),p(EGID:1666),p(EGID:1666),a(SCHEM:Oxygen),a(SCHEM:Oxygen),a(SCHEM:Oxygen),a(SCHEM:\"H+\"),a(SCHEM:\"H+\"),a(SCHEM:\"H+\")),products(a(SCHEM:\"Estradiol-17beta\"),a(SCHEM:\"NADP+\"),a(CHEBI:formate),a(SCHEM:H2O),a(SCHEM:H2O),a(SCHEM:H2O),a(SCHEM:H2O)))";
    // Test the default term stack size of 32
    char test_stack_size[LINE_CHAR_LEN]     = "a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(HGNC:AKT1))))))))))))))))))))))))))))))))";
    char new_line_needed[LINE_CHAR_LEN]     = "p(HGNC:AKT1)";
    char new_line_exists[LINE_CHAR_LEN]     = "p(HGNC:AKT1)\n";
    char new_line_crlf[LINE_CHAR_LEN]       = "p(HGNC:AKT1)\r\n";
    char new_line_extras[LINE_CHAR_LEN]     = "p(HGNC:AKT1)\r\n\r\n\n";

    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_term(empty)),
        "TERM (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_term(single_parameter)),
        "TERM fx(r) ARG NV pfx(AFFX) val(100009_r_at) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_term(parameter_string)),
        "TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_term(no_namespace)),
        "TERM fx(p) ARG NV pfx((null)) val(AKT1) ARG (null) (null) "
    );
    ck_assert_str_eq(
            bel_ast_as_string(bel_parse_term(single_char_one)),
            "TERM fx(r) ARG NV pfx(MGI) val(a) ARG (null) (null) "
    );
    ck_assert_str_eq(
            bel_ast_as_string(bel_parse_term(single_char_two)),
            "TERM fx(r) ARG NV pfx((null)) val(a) ARG (null) (null) "
    );
    ck_assert_str_eq(
            bel_ast_as_string(bel_parse_term(single_char_thr)),
            "TERM fx(pmod) ARG NV pfx((null)) val(P) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(long_parameter)),
            "TERM fx(a) ARG NV pfx(SCHEM) val(\"3,5,9-Trioxo-4-phosphaheptacosan-1-aminium, 7-(acetyloxy)-4-hydroxy-N,N,N-trimethyl-, hydroxide, inner salt, 4-oxide, (R)-\") ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(mult_parameter_one)),
            "TERM fx(p) ARG NV pfx((null)) val(AKT1) ARG NV pfx(HGNC) val(AKT2) ARG NV pfx((null)) val(AKT3) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(mult_parameter_two)),
            "TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG NV pfx(AFFX) val(\"AFFX-18SRNAMur/X00686_5_at\") ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(nested_one)),
            "TERM fx(cat) ARG TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(nested_two)),
            "TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG TERM fx(pmod) ARG NV pfx((null)) val(P) ARG NV pfx((null)) val(S) ARG NV pfx((null)) val(317) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(nested_thr)),
            "TERM fx(complex) ARG TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) ARG TERM fx(p) ARG NV pfx(HGNC) val(AKT2) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(nested_for)),
            "TERM fx(tloc) ARG TERM fx(p) ARG NV pfx(MGI) val(Slc2a4) ARG (null) (null) ARG NV pfx(GOCCID) val(0005737) ARG NV pfx(GOCCID) val(0005886) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(nested_fiv)),
            "TERM fx(p) ARG NV pfx(MGI) val(Akt1) ARG TERM fx(fusion) ARG NV pfx(MGI) val(Akt2) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(long_term)),
            "TERM fx(rxn) ARG TERM fx(reactants) ARG TERM fx(a) ARG NV pfx(CHEBI) val(testosterone) ARG (null) (null) ARG TERM fx(p) ARG NV pfx(EGID) val(1666) ARG (null) (null) ARG TERM fx(p) ARG NV pfx(EGID) val(1666) ARG (null) (null) ARG TERM fx(p) ARG NV pfx(EGID) val(1666) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(Oxygen) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(Oxygen) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(Oxygen) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(\"H+\") ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(\"H+\") ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(\"H+\") ARG (null) (null) ARG (null) (null) ARG TERM fx(products) ARG TERM fx(a) ARG NV pfx(SCHEM) val(\"Estradiol-17beta\") ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(\"NADP+\") ARG (null) (null) ARG TERM fx(a) ARG NV pfx(CHEBI) val(formate) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(H2O) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(H2O) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(H2O) ARG (null) (null) ARG TERM fx(a) ARG NV pfx(SCHEM) val(H2O) ARG (null) (null) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(test_stack_size)),
            "TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG TERM fx(a) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(new_line_needed)),
            "TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(new_line_exists)),
            "TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(new_line_crlf)),
            "TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) "
    );
    ck_assert_str_eq(
                    bel_ast_as_string(bel_parse_term(new_line_extras)),
            "TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) "
    );

#test statement_ast
    char empty[LINE_CHAR_LEN]               = "";
    char subject_term_only[LINE_CHAR_LEN]   = "p(HGNC:AKT1)";
    char new_line_needed[LINE_CHAR_LEN]     = "p(HGNC:AKT1) => bp(GOBP:\"apoptotic process\")";
    char new_line_exists[LINE_CHAR_LEN]     = "p(HGNC:AKT1) => bp(GOBP:\"apoptotic process\")\n";
    char new_line_crlf[LINE_CHAR_LEN]       = "p(HGNC:AKT1) => bp(GOBP:\"apoptotic process\")\r\n";
    char new_line_extras[LINE_CHAR_LEN]     = "p(HGNC:AKT1) => bp(GOBP:\"apoptotic process\")\r\n\r\n\n";
    char short_form_rel[LINE_CHAR_LEN]      = "p(HGNC:AKT1) -- r(HGNC:BRK1)";
    char long_form_rel[LINE_CHAR_LEN]       = "p(HGNC:AKT1) association r(HGNC:BRK1)";
    char nested_terms[LINE_CHAR_LEN]        = "catalyticActivity(proteinAbundance(PFH:\"ACSL Family\")) directlyIncreases reaction(reactants(abundance(SCHEM:\"Long-chain fatty acid\")),products(abundance(SCHEM:\"Long-chain fatty acyl CoA\")))";
    char nested_statement[LINE_CHAR_LEN]    = "gtp(p(PFH:\"RHO Family\")) increases (gtp(p(PFH:\"RAS Family\")) => kin(p(HGNC:RAF1)))";
    char nested_spacing[LINE_CHAR_LEN]      = "gtp(p(PFH:\"RHO Family\")) increases ( gtp(p(PFH:\"RAS Family\")) => kin(p(HGNC:RAF1)) )";
    char multi_nested[LINE_CHAR_LEN]        = "p(HGNC:AKT1) => ( r(HGNC:AKT1) -> ( act(p(HGNC:AKARP7)) -| complex(SCOMP:\"AP-1 Complex\") ) )";

    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(empty)),
        "STATEMENT (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(subject_term_only)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(new_line_needed)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(new_line_exists)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(new_line_crlf)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(new_line_extras)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(bp) ARG NV pfx(GOBP) val(\"apoptotic process\") ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(short_form_rel)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(--) (null) TERM fx(r) ARG NV pfx(HGNC) val(BRK1) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(long_form_rel)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(association) (null) TERM fx(r) ARG NV pfx(HGNC) val(BRK1) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(nested_terms)),
        "STATEMENT SUBJECT TERM fx(catalyticActivity) ARG TERM fx(proteinAbundance) ARG NV pfx(PFH) val(\"ACSL Family\") ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(directlyIncreases) (null) TERM fx(reaction) ARG TERM fx(reactants) ARG TERM fx(abundance) ARG NV pfx(SCHEM) val(\"Long-chain fatty acid\") ARG (null) (null) ARG (null) (null) ARG TERM fx(products) ARG TERM fx(abundance) ARG NV pfx(SCHEM) val(\"Long-chain fatty acyl CoA\") ARG (null) (null) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(nested_statement)),
        "STATEMENT SUBJECT TERM fx(gtp) ARG TERM fx(p) ARG NV pfx(PFH) val(\"RHO Family\") ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(increases) (null) STATEMENT SUBJECT TERM fx(gtp) ARG TERM fx(p) ARG NV pfx(PFH) val(\"RAS Family\") ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(kin) ARG TERM fx(p) ARG NV pfx(HGNC) val(RAF1) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(nested_spacing)),
        "STATEMENT SUBJECT TERM fx(gtp) ARG TERM fx(p) ARG NV pfx(PFH) val(\"RHO Family\") ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(increases) (null) STATEMENT SUBJECT TERM fx(gtp) ARG TERM fx(p) ARG NV pfx(PFH) val(\"RAS Family\") ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(=>) (null) TERM fx(kin) ARG TERM fx(p) ARG NV pfx(HGNC) val(RAF1) ARG (null) (null) ARG (null) (null) "
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(multi_nested)),
        "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(=>) (null) STATEMENT SUBJECT TERM fx(r) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(->) (null) STATEMENT SUBJECT TERM fx(act) ARG TERM fx(p) ARG NV pfx(HGNC) val(AKARP7) ARG (null) (null) ARG (null) (null) (null) OBJECT REL rel(-|) (null) TERM fx(complex) ARG NV pfx(SCOMP) val(\"AP-1 Complex\") ARG (null) (null) "
    );

#test statement_spacing
    char leading_spaces[LINE_CHAR_LEN]   = "    p(HGNC:AKT1) -- r(HGNC:AKT1)";
    char leading_tabs[LINE_CHAR_LEN]     = "\t\tp(HGNC:AKT1) -- r(HGNC:AKT1)";
    char trailing_spaces[LINE_CHAR_LEN]  = "p(HGNC:AKT1) -- r(HGNC:AKT1)    ";
    char trailing_tabs[LINE_CHAR_LEN]    = "p(HGNC:AKT1) -- r(HGNC:AKT1)\t\t";
    char function_spacing[LINE_CHAR_LEN] = " p (  \tHGNC:AKT1\t  )   --   r (\t  HGNC:AKT1  \t) ";
    char prefix_spacing[LINE_CHAR_LEN]   = "p( HGNC: AKT1 )  --  r( HGNC: AKT1 )";
    const char* expected_ast             = "STATEMENT SUBJECT TERM fx(p) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) (null) OBJECT REL rel(--) (null) TERM fx(r) ARG NV pfx(HGNC) val(AKT1) ARG (null) (null) ";

    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(leading_spaces)),
        expected_ast
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(leading_tabs)),
        expected_ast
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(trailing_spaces)),
        expected_ast
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(trailing_tabs)),
        expected_ast
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(function_spacing)),
        expected_ast
    );
    ck_assert_str_eq(
        bel_ast_as_string(bel_parse_statement(prefix_spacing)),
        expected_ast
    );

// vim: ft=c sw=4 ts=4 sts=4 expandtab
